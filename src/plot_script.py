# -*- coding: utf-8 -*-
"""plot_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z1wvvyfIB1O6hn2pKFt01_2QwDLrxvPo
"""

# Commented out IPython magic to ensure Python compatibility.
from os.path import join
import os
import json
from datetime import datetime


from tqdm import tqdm
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt


# %matplotlib inline

def plot_and_save_metrics(run_dir):
    # Load training and test losses and accuracies from text files
    training_losses = np.loadtxt(os.path.join(run_dir, 'training_losses.txt'))
    test_losses = np.loadtxt(os.path.join(run_dir, 'test_losses.txt'))
    training_accuracies = np.loadtxt(os.path.join(run_dir, 'training_accuracies.txt'))
    test_accuracies = np.loadtxt(os.path.join(run_dir, 'text_accuracies.txt'))

    # Plot and save the combined losses
    plt.figure(figsize=(10, 5))
    plt.plot(training_losses, label='Training Loss', color='#1f0c48')
    plt.plot(test_losses, label='Test Loss', color='#f8c932')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.title('Training and Test Loss')
    plt.legend()
    losses_plot_path = os.path.join(run_dir, 'combined_losses_plot.png')
    plt.savefig(losses_plot_path)
    plt.grid(True)
    plt.show()
    plt.close()


    # Plot and save the combined accuracies
    plt.figure(figsize=(10, 5))
    plt.plot(training_accuracies, label='Training Accuracy', color='#a83655')

    plt.plot(test_accuracies, label='Test Accuracy', color='#550f6d',)


    plt.xlabel('Epoch')
    plt.ylabel('Accuracy (%)')
    plt.title('Training Accuracy')
    plt.legend()
    accuracies_plot_path = os.path.join(run_dir, 'accuracies_plot.png')
    plt.savefig(accuracies_plot_path)

    plt.grid(True)
    plt.show()
    plt.close()

    return losses_plot_path, accuracies_plot_path

import matplotlib.pyplot as plt
import numpy as np

# Assuming you have a function `plot_results` that takes data and plots it
def plot_results(ax, epochs, train_data, test_data, ylabel, title):
    ax.plot(epochs, train_data, label='Training', linestyle='--', color='blue')
    ax.plot(epochs, test_data, label='Test', linestyle='-', color='orange')
    ax.set_title(title)
    ax.set_xlabel('Epochs')
    ax.set_ylabel(ylabel)
    ax.legend()
    ax.grid(True)

# Load your training and test accuracy data for ModelNet10
#
epochs_10 = np.arange(1, 21)
epochs_40 = np.arange(1, 51)
training_losses_10 = np.loadtxt('/content/training_losses_10.txt')
test_losses_10 = np.loadtxt('/content/test_losses_10.txt')
training_accuracies_10 = np.loadtxt('/content/training_accuracies_10.txt')
test_accuracies_10 = np.loadtxt('/content/test_accuracies_10.txt')

# Load your training and test accuracy data formModelNet40
training_losses_40 = np.loadtxt('/content/training_losses_40.txt')
test_losses_40 = np.loadtxt('/content/test_losses_40.txt')
training_accuracies_40 = np.loadtxt('/content/training_accuracies_40.txt')
test_accuracies_40 = np.loadtxt('/content/test_accuracies_40.txt')


fig, axs = plt.subplots(2, 2, figsize=(10, 5))

# Plotting ModelNet10 accuracy
plot_results(axs[0, 0], epochs_10, training_accuracies_10, test_accuracies_10, 'Accuracy (%)', 'ModelNet10 - Accuracy')

# Plotting ModelNet10 losses
plot_results(axs[0, 1], epochs_10, training_losses_10, test_losses_10, 'Loss', 'ModelNet10 - Loss')


# Plotting ModelNet40 accuracy
plot_results(axs[1, 0], epochs_40, training_accuracies_40, test_accuracies_40, 'Accuracy (%)', 'ModelNet40 - Accuracy')

# Plotting ModelNet40 losses
plot_results(axs[1, 1], epochs_40, training_losses_40, test_losses_40, 'Loss', 'ModelNet40 - Loss')


plt.tight_layout()
# Save the figure as an image (e.g., PNG or PDF)
fig.savefig('modelnet_plots.png')


plt.show()